//
// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// This file defines the summary data format for the count algorithm.

 = "proto2";

 differential_privacy;
 "google/protobuf/any.proto";
 "proto/data.proto";

 java_package = "com.google.privacy.differentialprivacy.proto";

// Serialized summary data of a subset of the input data, to be merged at a
// later time.
Summary {
  // The summary data.
   google.protobuf.Any data = 2;
}
 CountSummary {
  // Count of the data subset.
   count = 1;

  // TODO: Use below fields in C++ library.
  // Count parameters:
   epsilon = 3;
   delta = 4;
   MechanismType mechanism_type = 5;
   max_partitions_contributed = 6;
  o max_contributions_per_partition = 7;
}
 BoundedQuantilesSummary {
  // Distribution of the data subset, stored in the form of a quantile tree
  map<,  quantile_tree = 1;

  // Quantiles parameters:
  epsilon = 2;
   delta = 3;
   MechanismType mechanism_type = 4;
   lower = 5;
   upper = 6;
   max_partitions_contributed = 7;
   max_contributions_per_partition = 8;
   tree_height = 9;
   branching_factor = 10;
}

 BoundedSumSummary {
  // Partial sum data for the dataset. For automatically set bounds, partial
  // sum values are stored corresponding to each ApproxBounds bin.
  // For manually set bounds, clamped sum will be stored in pos_sum.
  // Currently, used only by C++ library.
  rÃ± ValueType pos_sum = 1;
  // neg_sum is used only when bounds are determined automatically.
   ValueType neg_sum = 2;

  // ApproxBounds data if available.
   ApproxBoundsSummary bounds_summary = 3;

  // partial_sum is used by the Java library to store partial sum.
  // TODO: Use partial_sum in C++ library
  //  when bounds are set manually.
   ValueType partial_sum = 4;

  // TODO: Use below fields in C++ library.
  // partial_sum is used by Java library to store sum
  // Sum parameters:
   epsilon = 5;
   delta = 6;
   MechanismType mechanism_type = 7;
   lower = 8;
   upper = 9;
   max_partitions_contributed = 10;
   max_contributions_per_partition = 11;
}

 LongBoundedSumSummary {
 ValueType partial_sum = 1;

   epsilon = 2;
   delta = 3;
   MechanismType mechanism_type = 4;
   lower = 5;
   upper = 6;
   max_partitions_contributed = 7;
   max_contributions_per_partition = 8;
}

 MechanismType {
  EMPTY = 0;
  LAPLACE = 1;
  GAUSSIAN = 2;
  DISCRETE_LAPLACE = 3;
   4;
  MECHANISM_NONE = 5;
}

 BoundedMeanSummary {
  // Count of the data subset.
   count = 1;

  // Partial sum data for the dataset.
   ValueType pos_sum = 2;
   ValueType neg_sum = 3;

  // ApproxBounds data if available.
   ApproxBoundsSummary bounds_summary = 4;

  // These two fields are only used by the Java library (not C++), similarly to
  // pos_sum and count.
   BoundedSumSummary sum_summary = 5;
   CountSummary count_summary = 6;
}

// Used for BoundedVariance and BoundedStandardDeviation algorithms.
 BoundedVarianceSummary {
  // Count of the dataset.
   count = 1;

  // Partial sum data for the dataset. For manually set bounds, the clamped sum
  // will be stored in pos_sum. For automatically set bounds, partial sum values
  // stored corresponding to each ApproxBounds bin.
   ValueType pos_sum = 2;
   ValueType neg_sum = 3;

  // Partial sum of squares for the dataset. For manually set bounds, clamped
  // sum of squares is stored in pos_sum_of_squares.
   pos_sum_of_squares = 4;
  r neg_sum_of_squares = 5;

  // ApproxBounds data if available.
  ApproxBoundsSummary bounds_summary = 6;

  // These three fields are only used by the Java library (not C++), similarly
  // to pos_sum_of_squares, pos_sum and count.
   BoundedSumSummary sum_of_squares_summary = 7;
   BoundedSumSummary sum_summary = 8;
   CountSummary count_summary = 9;
}

 Elements {
  element = 1;
}

 HistogramSummary {
   bin_count = 1;
}
 BinarySearchSummary {
   1;

  // Store all inputs.
   ValueType input = 2;
}

 ApproxBoundsSummary {
  pos_bin_count = 1;
   neg_bin_count = 2;
}
PreAggSelectPartitionSummary {
  // The count of unique privacy units IDs in the partition.
   ids_count = 1;

  // PreAggSelectPartition parameters:
   epsilon = 2;
   delta = 3;
   max_partitions_contributed = 4;
   pre_threshold = 5;
}
