//
// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package com.google.privacy.differentialprivacy;

import static com.google.common.truth.Truth.assertThat;
import static java.nio.charset.StandardCharsets.UTF_8;

import com.google.common.base.Supplier;
import com.google.differentialprivacy.testing.StatisticalTests.ClosenessTestParameters;
import com.google.differentialprivacy.testing.StatisticalTests.DistributionClosenessTestCase;
import com.google.differentialprivacy.testing.StatisticalTests.DistributionClosenessTestCaseCollection;
import com.google.differentialprivacy.testing.StatisticalTests.NoiseSamplingParameters;
import com.google.privacy.differentialprivacy.testing.ReferenceNoiseUtil;
import com.google.privacy.differentialprivacy.testing.StatisticalTestsUtil;
import com.google.privacy.differentialprivacy.testing.VotingUtil;
import com.google.protobuf.TextFormat;
import java.io.IOException;
import java.io.InputStreamReader;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

/**
 * Tests that the distribution of the noise generated by {@link LaplaceNoise} is close to a Laplace
 * distribution of the appropriate mean and variance.
 */
@RunWith(Parameterized.class)
public final class LaplaceClosenessTest {
  private static final String TEST_CASES_FILE_PATH =
     "external/com_google_differential_privacy/proto/testing/laplace_closeness_test_cases.textproto";

  private final DistributionClosenessTestCase testCase;

  public LaplaceClosenessTest(DistributionClosenessTestCase testCase) {
    this.testCase = testCase;
  }

  @Parameterized.Parameters
  public static Iterable<? extends Object> testCases() {
    return getTestCaseCollectionFromFile().getDistributionClosenessTestCaseList();
  }

  @Test
  public void laplaceClosenessTest() {
    LaplaceNoise noise = new LaplaceNoise();
    NoiseSamplingParameters samplingParameters = testCase.getNoiseSamplingParameters();
    ClosenessTestParameters closenessTestParameters = testCase.getClosenessTestParameters();
    Supplier<Double> laplaceSampleGenerator =
        () ->
            noise.addNoise(
                samplingParameters.getRawInput(),
                samplingParameters.getL0Sensitivity(),
                samplingParameters.getLinfSensitivity(),
                samplingParameters.getEpsilon(),
                /* delta= */ null);
    Supplier<Double> referenceSampleGenerator =
        () ->
            ReferenceNoiseUtil.sampleLaplace(
                closenessTestParameters.getMean(), closenessTestParameters.getVariance());

    assertThat(
            VotingUtil.runBallot(
                () ->
                    generateVote(
                        laplaceSampleGenerator,
                        referenceSampleGenerator,
                        samplingParameters.getNumberOfSamples(),
                        closenessTestParameters.getL2Tolerance(),
                        closenessTestParameters.getGranularity()),
                getNumberOfVotesFromFile()))
        .isTrue();
  }

  private int getNumberOfVotesFromFile() {
    DistributionClosenessTestCaseCollection.Builder testCaseCollectionBuilder =
        DistributionClosenessTestCaseCollection.newBuilder();
    try {
      TextFormat.merge(
          new InputStreamReader(
              getClass().getClassLoader().getResourceAsStream(TEST_CASES_FILE_PATH), UTF_8),
          testCaseCollectionBuilder);
    } catch (IOException e) {
      throw new RuntimeException("Unable to read input.", e);
    }
    return getTestCaseCollectionFromFile().getVotingParameters().getNumberOfVotes();
  }

  private static DistributionClosenessTestCaseCollection getTestCaseCollectionFromFile() {
    DistributionClosenessTestCaseCollection.Builder testCaseCollectionBuilder =
        DistributionClosenessTestCaseCollection.newBuilder();
    try {
      TextFormat.merge(
          new InputStreamReader(
              LaplaceClosenessTest.class.getClassLoader().getResourceAsStream(TEST_CASES_FILE_PATH),
              UTF_8),
          testCaseCollectionBuilder);
    } catch (IOException e) {
      throw new RuntimeException("Unable to read input.", e);
    } catch (NullPointerException e) {
      throw new RuntimeException("Unable to find input file.", e);
    }
    return testCaseCollectionBuilder.build();
  }

  private static boolean generateVote(
      Supplier<Double> sampleGeneratorA,
      Supplier<Double> sampleGeneratorB,
      int numberOfSamples,
      double l2Tolerance,
      double granularity) {
    Double[] samplesA = new Double[numberOfSamples];
    Double[] samplesB = new Double[numberOfSamples];
    for (int i = 0; i < numberOfSamples; i++) {
      samplesA[i] = StatisticalTestsUtil.discretize(sampleGeneratorA.get(), granularity);
      samplesB[i] = StatisticalTestsUtil.discretize(sampleGeneratorB.get(), granularity);
    }
    return StatisticalTestsUtil.verifyCloseness(samplesA, samplesB, l2Tolerance);
  }
}
